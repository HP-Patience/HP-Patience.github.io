<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>🍉Book-1,2章</title>
      <link href="/2024/05/15/%F0%9F%8D%89Book-1,2%E7%AB%A0/"/>
      <url>/2024/05/15/%F0%9F%8D%89Book-1,2%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="本书的使用："><a href="#本书的使用：" class="headerlink" title="本书的使用："></a>本书的使用：</h1><p><img src="1.png" alt=""><br><code>[来源于周志华老师的讲解]</code></p><h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章-绪论"></a>第1章-绪论</h1><h2 id="术语名词"><a href="#术语名词" class="headerlink" title="术语名词"></a>术语名词</h2><p>1.样本 = 示例 = 特征向量</p><ul><li><p>名词解释:<code>即对某个事件或者对象的 全局 描述</code></p></li><li><p>构成元素:<code>多组(特征:特征值)</code></p></li></ul><p>2.特征 = 属性</p><ul><li>名词解释：<code>即对某个事件或对象的一个 具体 特征的描述</code></li></ul><p>3.样本空间 = 属性空间 = 输入空间</p><ul><li>名词解释：<code>即特征张成的空间，空间中每个点对应一个特征向量即样本</code></li></ul><p>4.数据集，训练集，测试集</p><ul><li>数据集=训练集+测试集（一般二八分，训练集更多）</li></ul><p>数据集一般这样表示：</p><script type="math/tex; mode=display">D =\left\{x_{ 1 },x_{2},\ldots,x_{ m }\right\}</script><p>由m个样本X构成，每个样本有相同的d个特征，即样本的维数为d</p><p>5.样例，标记，标记空间</p><ul><li>样例=样本+标记</li></ul><p><strong>标记</strong>：即想预测的结果的 实际信息，比如想预测瓜的好坏，实际样本中的信息为”好瓜”/“坏瓜”，</p><p>一般这样表示：</p><script type="math/tex; mode=display">( x _ { i } , y _ { i } )</script><p><strong>标记空间</strong>：所有标记的集合</p><p>6.假设空间，版本空间</p><pre><code>假设：学得模型关于数据的潜在规律真实or真相：潜在规律本身假设空间：所有假设构成的集合版本空间：与训练集一致的假设构成的集合，由一个或多个假设空间的子集构成</code></pre><p>……</p><h2 id="独立同分布（i-i-d）"><a href="#独立同分布（i-i-d）" class="headerlink" title="独立同分布（i.i.d）"></a>独立同分布（i.i.d）</h2><p>通常假设样本空间中全体样本服从一个未知“分布” D</p><p>此处的“分布”指的是概率论中的概率分布</p><p>我们获得的每个样本都是独立地从这个分布上采样获得的，即“独立同分布”（简称i.i.d.）</p><p>一般而言，训练样本越多，我们得到的关于D的信息</p><h2 id="归纳偏好"><a href="#归纳偏好" class="headerlink" title="归纳偏好"></a>归纳偏好</h2><p>对假设空间 筛选 后所得到的 版本空间中 可能有 多个假设<br>这些假设都能够匹配训练集中的训练样本</p><p>而如何对版本空间中的假设进行选择呢？🤔</p><p><strong>奥卡姆剃刀</strong>：选取多个假设中最简单的。<br>其实感觉没啥用，因为”简单“的定义难以量化。</p><p><strong>“没有免费的午餐”（NFL）定理：</strong></p><pre><code>任意算法的“训练集外误差”相等，即不同算法的误差期望相同，无绝对意义上的更优算法。</code></pre><p><img src="2.jpg" alt=""></p><p>所以 <strong>不能摆脱具体问题</strong> 谈论算法的<strong>优劣</strong></p><p><strong>实际上</strong>：还是看<strong>测试集</strong>再模型上的效果，以及结合<strong>特定领域的需求</strong>对模型进行选择</p><h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><h3 id="1-监督学习-有导师学习"><a href="#1-监督学习-有导师学习" class="headerlink" title="1.监督学习-有导师学习"></a>1.监督学习-有导师学习</h3><p><strong>样本有标记</strong></p><p>1.1 <strong>分类</strong>问题-预测 <strong>离散值</strong></p><ul><li>二分类-正类/负类<br>  <code>一般取值0/1，文本可通过 特征工程 转换为数值型变量</code></li><li>多分类<br>  <code>涉及 多类别 的预测输出</code></li></ul><p>1.2 <strong>回归</strong>问题-预测 <strong>连续值</strong></p><pre><code>预测结果 ∈ R</code></pre><h3 id="2-非监督学习-无导师学习"><a href="#2-非监督学习-无导师学习" class="headerlink" title="2.非监督学习-无导师学习"></a>2.非监督学习-无导师学习</h3><p><strong>样本无标记</strong></p><p>2.1 <strong>聚类</strong>算法</p><pre><code>了解数据内在规律</code></pre><p>……</p><h2 id="机器学习的发展"><a href="#机器学习的发展" class="headerlink" title="机器学习的发展"></a>机器学习的发展</h2><ul><li><p><strong>符号主义</strong>：源于数学逻辑，产生明确的概念表示</p><p>  符号主义认为人工智能源于数理逻辑后来又发展了 启发式算法&gt;专家系统&gt;知识工程理论与技术</p><p>  决策树 和 基于逻辑的学习</p><pre><code>  决策树-&gt;模拟人类对概念的判定树形过程  基于逻辑的学习--&gt;典型代表：归纳逻辑程序设计(ILP)</code></pre></li><li><p><strong>连接主义</strong>：基于神经网络</p><p>  算法复杂度高，假设空间大，且参数设置缺乏理论指导</p><p>  经典代表：BP反向传播算法</p></li><li><p><strong>统计学习</strong>：支持向量机(SVM)，核方法</p><p>  与连接主义关系密切</p></li><li><p><strong>深度学习</strong>：早期连接主义的衍生，基于神经网络</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>定义类和方法</title>
      <link href="/2024/05/14/%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2024/05/14/%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>对象是实例化的类，所以对象也叫做实例。</p><p>一个实例(对象)由 <strong>属性</strong> (变量or数据)和 <strong>方法</strong> (行为)构成</p><p>所以属性和方法叫做对象的 <strong>成员</strong></p><p>对象的  属性  叫做 成员变量or实例变量(这俩也有点区别)</p><p>对象的  方法  叫做 成员方法</p><hr><p>在面向对象编程中，成员变量和实例变量通常指的是相同的概念，但它们的使用和含义略有不同，具体取决于上下文：</p><ol><li><p><strong>成员变量</strong>：</p><ul><li>成员变量是类的一部分，它们定义了类的状态或属性。</li><li>每个成员变量都是类的蓝图，用于创建对象时存储数据。</li><li>成员变量可以是静态的或非静态的（实例变量）。</li></ul></li><li><p><strong>实例变量</strong>（非静态变量）：</p><ul><li>实例变量是成员变量的一种，它们属于类的特定实例（对象）。</li><li>每个实例变量的副本都存储在创建的对象中，这意味着每个对象都有自己的实例变量副本。</li><li>实例变量的值对于每个对象都是独立的，一个对象的实例变量改变不会影响另一个对象的相应变量。</li></ul></li><li><p><strong>静态变量</strong>（类变量）：</p><ul><li>静态变量也是成员变量的一种，但它们不属于任何特定的实例。</li><li>静态变量只有单一的副本，所有类的实例共享这个副本。</li><li>静态变量通常用于存储类级别的数据，如配置信息或计数器。</li></ul></li></ol><p>以下是一些关键点的对比：</p><ul><li><strong>作用域</strong>：实例变量属于对象，每个对象都有其独立的副本；静态变量属于类，所有实例共享同一个副本。</li><li><strong>生命周期</strong>：实例变量随对象的创建而存在，随对象的销毁而消失；静态变量随类的加载而存在，随程序结束或类被卸载而消失。</li><li><strong>访问</strong>：实例变量可以通过对象的引用访问；静态变量可以通过类名直接访问，也可以通过对象引用访问。</li></ul><p>下面是一个简单的Java类示例，展示了实例变量和静态变量的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量，每个Car对象都有自己的颜色和速度</span></span><br><span class="line">    String color;</span><br><span class="line">    <span class="type">int</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量，所有Car对象共享同一个制造数量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">manufacturingCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="comment">// 每创建一个Car对象，制造数量增加</span></span><br><span class="line">        manufacturingCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实例方法，影响特定对象的速度</span></span><br><span class="line">        speed += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getManufacturingCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法，返回所有Car对象共享的制造数量</span></span><br><span class="line">        <span class="keyword">return</span> manufacturingCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>color</code> 和 <code>speed</code> 是实例变量，因为它们属于每个 <code>Car</code> 对象。而 <code>manufacturingCount</code> 是一个静态变量，因为它属于 <code>Car</code> 类本身，并且所有 <code>Car</code> 实例共享这个变量。<code>drive</code> 方法是一个实例方法，因为它操作特定 <code>Car</code> 对象的速度。<code>getManufacturingCount</code> 是一个静态方法，因为它返回的是类级别的信息。</p><hr><p>在Java中，类（Class）是用来创建对象的模板或蓝图。类本身不直接持有数据，但类定义中可以包含成员变量（也称为字段或属性），这些成员变量是用来存储数据的。当你根据类创建一个对象（实例）时，每个对象都会有自己的成员变量副本，这些副本中存储的就是数据。</p><p>例如，假设有一个名为 <code>Person</code> 的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个 <code>Person</code> 类中，<code>name</code> 和 <code>age</code> 就是成员变量，它们可以在类的实例中存储数据。当你创建 <code>Person</code> 类的对象时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><p><code>person1</code> 和 <code>person2</code> 都是 <code>Person</code> 类的实例，它们各自拥有自己的 <code>name</code> 和 <code>age</code> 数据。<code>person1</code> 的 <code>name</code> 是 “Alice”，<code>age</code> 是 30；而 <code>person2</code> 的 <code>name</code> 是 “Bob”，<code>age</code> 是 25。</p><p>类本身只是一个定义，它不包含数据，但是它定义了如何创建可以包含数据的对象。</p><hr><p>在面向对象编程（OOP）中，成员是类的一部分，它代表了类的特性（属性）或行为（方法）。成员是构成类的基本元素，它们定义了类的功能和数据结构。以下是成员的两种主要类型：</p><ol><li><p><strong>成员变量（属性）</strong>：</p><ul><li>成员变量是类的一部分，用于存储数据。它们是类的属性，通常用于描述对象的状态。</li><li>成员变量可以是私有的（private），这意味着它们只能被类内部的方法访问，或者可以是公有的（public），这意味着它们可以被任何其他类访问。</li><li>成员变量可以有默认的访问修饰符（没有显式指定），这通常是包级私有的（即同一个包内的其他类可以访问）。</li></ul></li><li><p><strong>成员方法（行为）</strong>：</p><ul><li>成员方法是类的一部分，定义了对象的行为。它们是类的操作，用于描述对象可以执行的动作。</li><li>成员方法可以有不同的访问修饰符，如public、private或protected，这决定了它们可以被谁调用。</li><li>方法还可以是静态的（static），这意味着它们属于类而不是类的实例，并且可以在不创建类实例的情况下被调用。</li></ul></li></ol><p>除了成员变量和成员方法，类的成员还可以包括：</p><ul><li><strong>构造方法</strong>：特殊的方法，用于创建类的对象。它们的名字必须与类名相同，并且没有返回类型。</li><li><strong>静态初始化块</strong>：用于初始化静态变量的代码块，它在类加载时执行一次。</li><li><strong>实例初始化块</strong>：用于初始化非静态变量的代码块，它在每次创建类的新实例时执行。</li><li><strong>内部类</strong>：定义在另一个类内部的类，它可以访问外部类的成员，包括私有成员。</li></ul><p>成员变量和方法的可见性和行为可以通过使用不同的访问修饰符和非访问修饰符来控制。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleClass</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> privateVar;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> protectedVar;</span><br><span class="line">    <span class="type">int</span> packageVar; <span class="comment">// 默认访问修饰符，也称为包级私有</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> publicVar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 方法逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有方法逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例初始化块</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 实例初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态初始化块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>ExampleClass</code> 包含了不同类型的成员，包括私有和公有的成员变量，一个构造方法，公有和私有的成员方法，以及静态方法。静态初始化块和实例初始化块分别用于初始化静态成员和非静态成员。</p><hr><p>在Java语言中，<code>this</code> 是一个特殊的关键字，它指向当前对象的引用。每个对象都有一个隐式的 <code>this</code> 引用，指向它自己。以下是 <code>this</code> 关键字的一些常见用法：</p><ol><li><p><strong>区分成员变量和局部变量</strong>：当局部变量名与成员变量名相同时，可以使用 <code>this</code> 关键字来区分它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number; <span class="comment">// 使用 this 来引用成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在构造函数中调用另一个构造函数</strong>：可以使用 <code>this()</code> 来调用同一个类中的另一个构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0</span>); <span class="comment">// 默认构造函数调用带参数的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在方法中返回当前对象的引用</strong>：有时，方法需要返回调用该方法的对象的引用，这时可以使用 <code>this</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> MyClass <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 一些逻辑...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>; <span class="comment">// 返回当前对象的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在参数中传递当前对象</strong>：当需要将当前对象作为参数传递给另一个方法时，可以使用 <code>this</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(MyClass other)</span> &#123;</span><br><span class="line">        other.copy(<span class="built_in">this</span>); <span class="comment">// 将当前对象作为参数传递</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(MyClass other)</span> &#123;</span><br><span class="line">        <span class="comment">// 复制逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在匿名类和内部类中引用外部类的实例</strong>：在匿名类或内部类中，可以使用 <code>this</code> 关键字来引用外部类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                OuterClass.<span class="built_in">this</span>.doWork(); <span class="comment">// 调用外部类的 doWork 方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 工作逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在重载方法中使用</strong>：当类中有多个同名方法但参数列表不同时，可以使用 <code>this</code> 调用其他重载的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Number: &quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Text: &quot;</span> + text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAll</span><span class="params">(<span class="type">int</span> number, String text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.print(number); <span class="comment">// 调用第一个 print 方法</span></span><br><span class="line">        <span class="built_in">this</span>.print(text); <span class="comment">// 调用第二个 print 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>this</code> 关键字是Java中一个非常有用的工具，它允许程序员在各种情况下引用当前对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建实遇问题</title>
      <link href="/2024/05/13/Hexo%E6%90%AD%E5%BB%BA%E5%AE%9E%E9%81%87%E9%97%AE%E9%A2%98/"/>
      <url>/2024/05/13/Hexo%E6%90%AD%E5%BB%BA%E5%AE%9E%E9%81%87%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spawn-failed问题"><a href="#1-spawn-failed问题" class="headerlink" title="1.spawn_failed问题"></a>1.spawn_failed问题</h1><h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>其实出现这个问题，很大可能是因为https和http的proxy的对应的分别是https和http开proxy server，</p><p>而https的proxy server可能无法正常工作。</p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>修改_config.yml文件的deploy部分，将https 修改为http url 或者 设置为git url, 配置为https oauth2 加token</p><ul><li>设置为git url(推荐) 亲测有效</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:your_github_id/your_github_id.github.io.git</span><br><span class="line">    branch: gh-pages</span><br></pre></td></tr></table></figure><h1 id="2-头像无法显示问题"><a href="#2-头像无法显示问题" class="headerlink" title="2.头像无法显示问题"></a>2.头像无法显示问题</h1><h2 id="原因分析：-1"><a href="#原因分析：-1" class="headerlink" title="原因分析："></a>原因分析：</h2><p>不明原因，猜测是路径问题</p><h2 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h2><ol><li>将想要显示的头像图片存入本地文件夹</li><li>在根目录下进入git bash使用hexo g和hexo d上传代码到github仓库</li><li>在github仓库找到该图片，鼠标右键复制图片链接</li><li>修改主题配置文件，如我修改的为config.butterfly.yml文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">输入你复制的图片链接</span></span><br><span class="line">  <span class="comment"># effect为true 则鼠标放于图片上，会使图片一直旋转</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="解决方法2："><a href="#解决方法2：" class="headerlink" title="解决方法2："></a>解决方法2：</h2><p>更改默认头像路径</p><p>默认路径：<code>&quot;C:\Users\陈荣伟\Desktop\Blog\Hexo-blog\blog\themes\butterfly\source\img\friend_404.gif&quot;</code></p><p>把需要的 头像 名称改为<code>friend_404.gif</code>，把<code>friend_404.gif</code> 重命名 成别的即可</p><p>_config.butterfly.yml内的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Replace Broken Images (替换无法显示的图片)</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">/img/friend_404.gif</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br></pre></td></tr></table></figure><h1 id="3-本地预览正常，但部署到GitHub-网站背景图片不加载"><a href="#3-本地预览正常，但部署到GitHub-网站背景图片不加载" class="headerlink" title="3.本地预览正常，但部署到GitHub 网站背景图片不加载"></a>3.本地预览正常，但部署到GitHub 网站背景图片不加载</h1><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li>分清背景图片是放在本地还是别处？</li><li>记得用图片的网络链接，确保图片地址没有错误。</li><li>然后<strong>清除浏览器缓存</strong>再试试</li></ol><h2 id="hexo-clean命令"><a href="#hexo-clean命令" class="headerlink" title="hexo clean命令"></a>hexo clean命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 <code>db.json</code> 和已生成的静态文件 <code>public</code>。</p><ul><li>网站显示异常时可以执行这条命令试试。</li></ul><p>接着依次运行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="终极方法"><a href="#终极方法" class="headerlink" title="终极方法"></a>终极方法</h2><p>删除<code>.deploy_git</code>和<code>public</code>文件</p><h1 id="4-插入图片的显示问题"><a href="#4-插入图片的显示问题" class="headerlink" title="4.插入图片的显示问题"></a>4.插入图片的显示问题</h1><p>参考文章：</p><p><code>[在hexo博客中插入图片的方法_hexo插入图片-CSDN博客](https://blog.csdn.net/2301_77285173/article/details/130189857)</code></p><p>插入图片的方法<br>在完成了博客搭建、发布文章后，如果我们想在文章中插入图片，该怎么做呢？</p><p>如果图片保存在本地</p><h2 id="方法一：全局资源文件夹"><a href="#方法一：全局资源文件夹" class="headerlink" title="方法一：全局资源文件夹"></a>方法一：全局资源文件夹</h2><p>即，将所有文章的资源统一用一个全局资源文件夹管理。<br>此方法的优点是比较简便，并且当多篇文章需要引用同一资源时，也比较方便。缺点是当文章很多时，各个文章的图片都在同一文件夹，不便管理。</p><p>具体方法：<br>在hexo文件夹下的source目录下，新建一个文件夹叫images(名字随意)，将要插入的图片放在该文件夹中。<br>md文档内，使用<code>![图片](图片链接地址 &quot;图片title&quot;)</code>的格式，圆括号内的链接地址写<code>(/images/name.jpeg)</code>。<br>这里的 / 指的是根目录，对于hexo，资源文件的根目录就是source。</p><p>例如，在md文档中写：<code>![图片](/images/20.jpeg &quot;甘雨&quot;)</code><br>同时将“20.jpeg”这个图片文件放在hexo文件夹<code>/source/images</code>下，则图片可以上传到博客。</p><h2 id="方法二：文章资源文件夹"><a href="#方法二：文章资源文件夹" class="headerlink" title="方法二：文章资源文件夹"></a>方法二：文章资源文件夹</h2><p>即，对于每篇文章，使用一个文件夹管理资源。<br>此方法的优点是，当文章很多时，便于结构化管理。缺点是，比方法一麻烦一点。</p><p>具体方法：<br>2.1 修改hexo文件夹中的_config.yml文件，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.2 在终端cd到hexo文件夹，hexo new [layout] <title> 命令创建一篇新文章，此时会在hexo文件夹的source目录下，自动创建一个文件夹和.md文件。<br>注：这句命令中的layout可暂时不写，使用默认的。title就是你的新文章的名字。如果文章名中有空格，务必将整个文章名用双引号引起来。如果文章名中没有空格，可以加双引号，也可以不加。<br>例如，执行hexo new “如何发布文章到hexo博客上(含插入图片的方法)”，如下：</p><p>会在source/_post文件夹下生成一个”如何发布文章到hexo博客上(含插入图片的方法).md”文件。如下：</p><p>可以看到，同时还生成了一个同名的资源文件夹。</p><p>2.3 我们可以将所有与该文章有关的资源（包括图片）放在这个关联文件夹中<br>2.4 通过相对路径来引用图片资源。<br>例如，将“1.jpeg”这个图片资源放在该文件夹中，并在.md文件中像这样引用图片：<code>![图片](1.jpeg)</code>，这个方法在资源较多时方便管理。</p><p>另附Typora编辑器中不显示图片的解决方案：<br>安装下面的插件，可以使Typora等Markdown编辑器预览以及Hexo发布预览时，均能正常显示图片。<br><code>npm install hexo-asset-img --save</code><br>这样，如果你使用Typora编辑markdown文档，在typora内也可以显示图片了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter模板</title>
      <link href="/2024/05/12/Front-matter%E6%A8%A1%E6%9D%BF/"/>
      <url>/2024/05/12/Front-matter%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><p>如果标注可选的参数，可根据自己需要添加，不用全部都写</p><p><strong>Page Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top_img:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aside:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">写法</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td>【必需】页面标题</td></tr><tr><td style="text-align:left">date</td><td>【必需】页面创建日期</td></tr><tr><td style="text-align:left">type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td style="text-align:left">updated</td><td>【可选】页面更新日期</td></tr><tr><td style="text-align:left">description</td><td>【可选】页面描述</td></tr><tr><td style="text-align:left">keywords</td><td>【可选】页面关键字</td></tr><tr><td style="text-align:left">comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td style="text-align:left">top_img</td><td>【可选】页面顶部图片</td></tr><tr><td style="text-align:left">mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td style="text-align:left">kates</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td style="text-align:left">aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td style="text-align:left">aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td style="text-align:left">highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table></div><p><strong>Post Front-matter：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table></div><p>注意：我的博客根目录路径为 【D:/Blog/】，下文所说的根目录都是此路径，将用[BlogRoot]代替。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My first blog</title>
      <link href="/2024/04/23/My-first-blog/"/>
      <url>/2024/04/23/My-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="大事件"><a href="#大事件" class="headerlink" title="大事件"></a>大事件</h1><p>芜湖！成功部署blog！૮(˶ᵔ ᵕ ᵔ˶)ა</p><p>以后就在这上面写学习总结输出了！</p><p>之后还要完善页面渲染哈，今天就先收工啦 ૮(∪｡∪)ა｡｡｡zzzzz</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
